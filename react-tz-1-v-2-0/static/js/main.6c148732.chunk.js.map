{"version":3,"sources":["components/Home.js","components/Profile.js","components/News.js","components/PageNotFound.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","Profile","News","PageNotFound","Login","App","className","BrowserRouter","AppBar_default","position","color","Toolbar_default","Typography_default","variant","Link","to","Button_default","href","Route","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iNAQeA,EANF,kBACXC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0DCIWC,EANC,kBACdH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0DCIWE,EANF,kBACXJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0DCIWG,EANM,kBACnBL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,mBCIWI,EAND,kBACZN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kHCsDWK,0LA3CX,OACEP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAAQU,SAAS,SAASC,MAAM,WAC9BZ,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,KACED,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAYc,QAAQ,KAAKH,MAAM,WAA/B,iBAIFZ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,GAAG,KAAIjB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CAAQc,QAAQ,YAAYH,MAAM,UAAUO,KAAK,KAAjD,gDAEfnB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,GAAG,YAAWjB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CAAQc,QAAQ,YAAYH,MAAM,UAAUO,KAAK,YAAjD,gDAEtBnB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,GAAG,SAAT,IAAkBjB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CAAQc,QAAQ,YAAYH,MAAM,UAAUO,KAAK,SAAjD,gDAEpBnB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,GAAG,iBAAgBjB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CAAQc,QAAQ,YAAYH,MAAM,UAAUO,KAAK,iBAAjD,SAE3BnB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,GAAG,UAAT,IAAmBjB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CAAQc,QAAQ,YAAYH,MAAM,UAAUO,KAAK,UAAjD,uCAM3BnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWxB,IACjCC,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWpB,IAClCH,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOE,KAAK,QAAQC,UAAWnB,IAC/BJ,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOE,KAAK,gBAAgBC,UAAWlB,IACvCL,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWjB,cArC1BkB,cCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6c148732.chunk.js","sourcesContent":["import React from 'react';\n\nconst Home = () => (\n  <div>\n    <h2>Главная</h2>\n  </div>\n);\n\nexport default Home;","import React from 'react';\n\nconst Profile = () => (\n  <div>\n    <h2>Профиль</h2>\n  </div>\n);\n\nexport default Profile;","import React from 'react';\n\nconst News = () => (\n  <div>\n    <h2>Новости</h2>\n  </div>\n);\n\nexport default News;","import React from 'react';\n\nconst PageNotFound = () => (\n  <div>\n    <h2>404</h2>\n  </div>\n);\n\nexport default PageNotFound;","import React from 'react';\n\nconst Login = () => (\n  <div>\n    <h2>Логин</h2>\n  </div>\n);\n\nexport default Login;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport Home from './components/Home';\nimport Profile from './components/Profile'\nimport News from './components/News';\nimport PageNotFound from './components/PageNotFound'\nimport Login from './components/Login'\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <div>\n            <AppBar position=\"static\" color=\"default\">\n              <Toolbar>\n                <ul>\n                  <li>\n                    <Typography variant=\"h6\" color=\"inherit\">\n                      TZ #1, v.2.0\n                    </Typography>\n                  </li>\n                  <li>\n                    <Link to=\"/\"><Button variant=\"contained\" color=\"primary\" href=\"/\">Главная</Button></Link>\n                  </li>\n                  <li>\n                    <Link to=\"/profile\"><Button variant=\"contained\" color=\"primary\" href=\"/profile\">Профиль</Button></Link>\n                  </li>\n                  <li>\n                    <Link to=\"/news\"> <Button variant=\"contained\" color=\"primary\" href=\"/news\">Новости</Button></Link>\n                  </li>\n                  <li>\n                    <Link to=\"/pagenotfound\"><Button variant=\"contained\" color=\"primary\" href=\"/pagenotfound\">404</Button></Link>\n                  </li>\n                  <li>\n                    <Link to=\"/login\"> <Button variant=\"contained\" color=\"primary\" href=\"/login\">Логин</Button></Link>\n                  </li>\n                </ul>\n              </Toolbar>\n            </AppBar>\n\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/profile\" component={Profile}/>\n            <Route path=\"/news\" component={News}/>\n            <Route path=\"/pagenotfound\" component={PageNotFound}/>\n            <Route path=\"/login\" component={Login}/>\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}